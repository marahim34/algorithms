Bellman-Ford Algorithm:
The Bellman-Ford algorithm is used to compute the shortest paths from a single source vertex to all other vertices in a weighted graph. It is particularly useful for graphs that have negative weight edges, where algorithms like Dijkstra's algorithm fail.

Key points:
- Single-source shortest path: The algorithm finds the shortest path from a single source node to every other node.
- Works with negative weights: Unlike Dijkstra‚Äôs algorithm, Bellman-Ford can handle graphs with negative edge weights. However, if there is a negative weight cycle, the algorithm detects it.
- Time Complexity: ùëÇ(ùëâ‚ãÖùê∏), where V is the number of vertices and ùê∏ is the number of edges.

REMEMBER: IF there is NEGATIVE WEIGHT CYCLE, it cannot be solved with Dijkstra Algorithm. In that case you need to solve the issue with Bellman-Ford Algorithm.
Dijkstra can work negative value but it can not handle if the all values (meaning the cycle) are negative.


Bellman-Ford works with the edge. 

The Bellman-Ford algorithm guarantees finding the shortest distance to any node that can be reached from the starting point using up to K edges (or hops).

###
In the Bellman-Ford algorithm, path relaxation is a key step. The idea behind path relaxation is to gradually find shorter paths by improving the estimated distances between nodes.

    1. For every edge, we check if using that edge gives us a shorter path to the destination node. If it does, we update the distance.
    2. We repeat this process for all edges V - 1 times (where V is the number of nodes). This ensures we find the shortest paths for all nodes.
    3. After these rounds, the shortest path to each node is guaranteed to be found.


### BFS Dijktra Bellman-Ford all are known as algorithm for SINGLE SOURCE SHORTEST PATH.

### Floyd-Warshall Algorithm is all-pair path algorithm;

Algorithm       | Use When                                                                                           | Handles Negative Weights? | Best For                                                       | Time Complexity
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BFS             | Unweighted graphs (or equal weight edges); shortest path in terms of number of edges               | No                        | Shortest path in unweighted graphs                             | O(V + E)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DFS             | Exploring all nodes or paths, detecting cycles, topological sorting, finding connected components  | No                        | Deep exploration, cycle detection, topological sort, SCCs      | O(V + E)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Dijkstra        | Weighted graphs with non-negative weights; shortest path from single source                        | No                        | Single-source shortest path in non-negative weight graphs      | O((V + E) log V) with a priority queue
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Bellman-Ford    | Weighted graphs with negative weights; detecting negative weight cycles; shortest path from source | Yes                       | Handling negative weights, detecting negative-weight cycles    | O(V * E)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Floyd-Warshall  | All-pairs shortest path, small/dense graphs; handles negative weights                              | Yes                       | All-pairs shortest path, dense graphs                          | O(V¬≥)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Floyd-Warshall Algorithm
The The Floyd-Warshall algorithm is an all-pairs shortest path algorithm. It computes the shortest paths between every pair of vertices in a weighted graph. Unlike Bellman-Ford, which deals with a single source, Floyd-Warshall handles multiple sources efficiently.

Key Points:
All-pairs shortest paths: It calculates the shortest paths between every pair of vertices.
Handles negative weights: Like Bellman-Ford, Floyd-Warshall can deal with negative edge weights but cannot handle negative weight cycles (it will produce incorrect results if such cycles exist).
Dynamic Programming approach: The algorithm is based on dynamic programming to build solutions from smaller subproblems.
Time Complexity: 
ùëÇ(ùëâ^3), where V is the number of vertices. This can be a drawback for very large graphs but is still useful for moderate-sized graphs.
Space Complexity: ùëÇ(ùëâ^2).


The theme of the Floyd-Warshall algorithm is based on finding shorter paths between two nodes by considering whether passing through a third node offers a shorter route.

Concept of Floyd-Warshall:
For every pair of nodes (i, j), the algorithm checks if there is a shorter path between them by passing through an intermediate node k. The distance is updated as:

dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j])

Theme:
Indirect Routes: Instead of relying only on direct connections between two nodes, the algorithm evaluates whether going through a third node provides a shorter path.

Iterative Process: The algorithm introduces each node k as an intermediate step to update the shortest paths for all pairs of nodes.

Example:
Consider three nodes A, B, and C with the following distances:

A to B = 3
B to C = 2
A to C = 8
Initially, the direct path from A to C is 8. By applying Floyd-Warshall, the algorithm evaluates the indirect path A to B to C, which gives a total distance of 5 (A to B = 3, B to C = 2). Since 5 is shorter than 8, the distance from A to C is updated to 5.