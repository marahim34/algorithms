What is Algorithm?
An algorithm is like a set of instructions you follow to complete a task or solve a problem. Think of it as a recipe: just as a recipe tells you step by step how to bake a cake, an algorithm tells a computer step by step how to do something, like sorting a list of numbers or finding the best route on a map.

So, an algorithm is a list of steps a computer follows to get something done. Whether it's something basic like organizing data or something complex like keeping your online information safe, algorithms are the key to making it happen.

What is a Graph?
    A graph is a collection of points and lines that connect some or all of the points. Think of it like a map:

    Vertices (or Nodes): These are the points, like cities on a map.
    Edges: These are the lines that connect the points, like roads between cities.

    Graphs can represent all sorts of connections, like friendships in a social network or roads in a city.

What is a Tree?
    A tree is a special type of graph with some important rules:

    One Starting Point (Root): A tree has one main point, called the root, where everything starts.
    No Loops: In a tree, there’s only one way to get from one point to another, so you won’t ever loop back to the same point.

Differences Between a Graph and a Tree:

    1. Multiple Edges:
        Graph: Can have multiple edges between the same pair of nodes, meaning two nodes can be connected by more than one line.
        Tree: Does not have multiple edges between the same pair of nodes; each pair of connected nodes has only one edge.

    2. Multiple Ways:
        Graph: Can have multiple ways (paths) to get from one node to another.
        Tree: Has only one way (path) to get from one node to another.

    3. Cycles:
        Graph: Can have cycles, meaning you can start at one node, follow edges, and return to the starting node.
        Tree: Cannot have cycles; there's no way to loop back to the starting point.

    4. Edge Direction:
        Graph: Can have directed or undirected edges. In a directed graph, edges have arrows showing direction; in an undirected graph, edges have no direction.
        Tree: Typically has undirected edges, but if it's a "rooted tree," the edges are often considered to have an implied direction, from parent to child.


Types of Graphs

    1. Undirected Graph: Edges have no direction; connections are bidirectional. For example: A map where cities are connected by roads, and you can travel in both directions.
    
       Illustration:

             A
            / \
           B - C

    2. Directed Graph (Digraph): Edges have a direction, indicated by arrows. You can only travel from one node to another in the direction of the arrow. 

       Illustration:

            A → B
            ↓
            C

    3. Weighted Graph: Edges have weights or costs associated with them, which could represent distances, time, or other metrics. For example: A map where the weight on each road edge represents the distance between cities.
        
        Illustration:

            A --5-- B
            |       |
            3       2
            |       |
            C --4-- D

    4. Unweighted Graph: Edges have no weights; all connections are equal. For example: A social network where all friendships are treated equally without additional metrics.

        Illustration:

            A - B
            |   |
            C - D

    5. Cyclic Graph: Contains at least one cycle, which is a path that starts and ends at the same node without retracing any edge.

        Illustration:

            A - B
            |   |
            D - C

We can draw the relationship of a graph in three ways:
    1. Adjacency Matrix
    2. Adjacency list
    3. Edge list

### Before that check the examples of memset for how to copy and set the values through the memset